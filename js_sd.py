# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'js_sd.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtWidgets
import cv2  # cv2是python中计算机视觉库OpenCV的一个模块，全称是Open Source Computer Vision Library（开放源代码计算机视觉库）
from PyQt5 import QtCore, QtGui, QtWidgets
import mediapipe as mp
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import time
import sys
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import QTimer
mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose
pose = mp_pose.Pose()

######################################################################################3

def get_pose(img):
    h, w = img.shape[0], img.shape[1]
    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = pose.process(img_RGB)
    if results.pose_landmarks:
        coordinate = []
        for i in range(33):
            cx = int(results.pose_landmarks.landmark[i].x * w)
            cy = int(results.pose_landmarks.landmark[i].y * h)
            single = [i, cx, cy]
            coordinate.append(single)
        return coordinate
    return None

def process_frame(img):
    h, w = img.shape[0], img.shape[1]
    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = pose.process(img_RGB)
    if results.pose_landmarks:
        mp_drawing.draw_landmarks(img, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)
    else:
        cv2.putText(img, 'No Person', (25, 75), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (255, 0, 255), 2)
        print('No person detected in the image.')

    return img

def calculate_distance(p1, p2):
    return np.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

def calculate_angle(p1, p2, p3):
    a = np.array([p1[0], p1[1]])
    b = np.array([p2[0], p2[1]])
    c = np.array([p3[0], p3[1]])

    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b[0])
    angle = np.abs(radians * 180.0 / np.pi)

    if angle > 180.0:
        angle = 360 - angle

    return angle
def check_posture(landmarks, img):
    try:
        img_pil = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(img_pil)
        font_path = "msyh.ttc"
        font = ImageFont.truetype(font_path, 20)

        LEFT_WRIST = 15
        RIGHT_WRIST = 16
        LEFT_ANKLE = 27
        RIGHT_ANKLE = 28
        LEFT_SHOULDER = 11
        RIGHT_SHOULDER = 12
        LEFT_HIP = 23
        RIGHT_HIP = 24
        NOSE = 0
        LEFT_EYE = 1
        RIGHT_EYE = 2

        left_wrist_x = landmarks[LEFT_WRIST][1]
        right_wrist_x = landmarks[RIGHT_WRIST][1]
        left_ankle_x = landmarks[LEFT_ANKLE][1]
        right_ankle_x = landmarks[RIGHT_ANKLE][1]

        wrist_ankle_diff_left = abs(left_wrist_x - left_ankle_x)
        wrist_ankle_diff_right = abs(right_wrist_x - right_ankle_x)

        left_back_angle = calculate_angle(landmarks[LEFT_SHOULDER], landmarks[LEFT_HIP], landmarks[LEFT_ANKLE])
        right_back_angle = calculate_angle(landmarks[RIGHT_SHOULDER], landmarks[RIGHT_HIP], landmarks[RIGHT_ANKLE])

        head_angle_left = calculate_angle(landmarks[LEFT_EYE], landmarks[NOSE], landmarks[LEFT_SHOULDER])
        head_angle_right = calculate_angle(landmarks[RIGHT_EYE], landmarks[NOSE], landmarks[RIGHT_SHOULDER])

        shoulder_width = calculate_distance(landmarks[LEFT_SHOULDER], landmarks[RIGHT_SHOULDER])
        ankle_width = calculate_distance(landmarks[LEFT_ANKLE], landmarks[RIGHT_ANKLE])

        messages = []
        messages2=[]
        messages3=[]
        draw.text((25, 20), "请侧向站立", font=font, fill=(0, 0, 0))

        if wrist_ankle_diff_left > 100 or wrist_ankle_diff_right > 100:
            messages.append("杠铃应保持在脚心正上方")
            draw.text((25, 50), "杠铃保存在脚心正上方", font=font, fill=(0, 0, 0))

        if ankle_width > shoulder_width * 1.5:
            draw.text((25, 80), "两脚间距略大于肩膀", font=font, fill=(0, 0, 0))
        if ankle_width < shoulder_width:
            messages2.append("两脚间距不足")
            draw.text((25, 80), "两脚间距不足", font=font, fill=(0, 0, 0))

        if (wrist_ankle_diff_left <= 100 and wrist_ankle_diff_right <= 100) and (ankle_width > shoulder_width and ankle_width < shoulder_width * 1.5):
            messages3.append("动作正确")
            draw.text((25, 170), "动作正确", font=font, fill=(0, 0, 0))

        img = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)

    except Exception as e:
        print(f"Error in check_posture function: {str(e)}")

    return img, messages,messages2,messages3
########################################################################################################
class Ui_QMainWindow(QtWidgets.QMainWindow):
    def __init__(self):  # 构造方法
        super(Ui_QMainWindow, self).__init__()
        self.setupUi(self)
        ########################################################
        # 在类构造函数中初始化一些额外的东西
        self.camera_timer = QTimer()  # 创建定时器QTimer对象（camera_timer）
        self.cap = cv2.VideoCapture(0)  # 初始化cv2.VideoCapture对象
        self.init()  # 构建init方法

    def setupUi(self, QMainWindow):
        QMainWindow.setObjectName("QMainWindow")
        QMainWindow.resize(791, 585)
        self.centralwidget = QtWidgets.QWidget(QMainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(0, 0, 801, 571))
        self.listView.setStyleSheet("background-color: rgb(45, 105, 175);\n"
"")
        self.listView.setObjectName("listView")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(280, 30, 201, 71))
        font = QtGui.QFont()
        font.setFamily("阿里巴巴普惠体")
        font.setPointSize(30)
        font.setUnderline(True)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setMouseTracking(False)
        self.label.setTabletTracking(False)
        self.label.setWordWrap(False)
        self.label.setIndent(8)
        self.label.setOpenExternalLinks(False)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(400, 120, 411, 281))
        self.label_2.setObjectName("label_2")
        self.listView_2 = QtWidgets.QListView(self.centralwidget)
        self.listView_2.setGeometry(QtCore.QRect(0, 0, 1191, 821))
        self.listView_2.setStyleSheet("background-image:url(:/pic24.png)")
        self.listView_2.setObjectName("listView_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(0, 60, 451, 251))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 340, 501, 41))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 400, 501, 51))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(30, 470, 511, 41))
        self.label_6.setObjectName("label_6")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(610, 380, 100, 50))
        font = QtGui.QFont()
        font.setFamily("阿里巴巴普惠体")
        font.setPointSize(11)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(610, 450, 100, 50))
        font = QtGui.QFont()
        font.setFamily("阿里巴巴普惠体")
        font.setPointSize(11)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        QMainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(QMainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 791, 22))
        self.menubar.setObjectName("menubar")
        QMainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(QMainWindow)
        self.statusbar.setObjectName("statusbar")
        QMainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(QMainWindow)
        QtCore.QMetaObject.connectSlotsByName(QMainWindow)

    def retranslateUi(self, QMainWindow):
        _translate = QtCore.QCoreApplication.translate
        QMainWindow.setWindowTitle(_translate("QMainWindow", "MainWindow"))
        self.label.setText(_translate("QMainWindow", "杠铃深蹲"))
        self.label_2.setText(_translate("QMainWindow", "TextLabel"))
        self.label_3.setText(_translate("QMainWindow", "TextLabel"))
        self.label_4.setText(_translate("QMainWindow", "TextLabel"))
        self.label_5.setText(_translate("QMainWindow", "TextLabel"))
        self.label_6.setText(_translate("QMainWindow", "TextLabel"))
        self.pushButton.setText(_translate("QMainWindow", "开始锻炼"))
        self.pushButton_2.setText(_translate("QMainWindow", "暂停锻炼"))

    def init(self):
        self.pushButton.clicked.connect(self.open_camera)  # 绑定打开相机槽函数open_camera
        self.pushButton_2.clicked.connect(self.close_camera)  # 绑定关闭相机槽函数close_camera
        self.camera_timer.timeout.connect(self.show_image)  # 绑定显示图片槽函数show_image

    ########################################################
    # 以下是自定义的槽函数及其他衍生的自定义功能函数
    def open_camera(self):  # 打开相机
        self.cap = cv2.VideoCapture(0)  # 摄像头
        self.camera_timer.start(40)  # 每40毫秒读取一次，即刷新率为25帧

    # 修改 show_image 函数来显示检测到的文字信息
    def show_image(self):  # 显示图片
        flag, self.image = self.cap.read()  # 从视频流中读取图片
        if not flag:
            return

        self.image = process_frame(self.image)  # 处理每一帧视频图像
        coordinate = get_pose(self.image)  # 获取姿势坐标
        messages = []
        messages2 = []
        messages3 = []
        if coordinate:
            self.image, messages,messages2,messages3 = check_posture(coordinate, img=self.image)  # 检查姿势并标注

        image_show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)  # 转为 RGB 格式

        height, width, channel = image_show.shape
        step = channel * width
        qImg = QImage(image_show.data, width, height, step, QImage.Format_RGB888)

        pixmap = QPixmap.fromImage(qImg)
        scaled_pixmap = pixmap.scaled(self.label_3.size(), QtCore.Qt.KeepAspectRatio)

        self.label_3.setPixmap(scaled_pixmap)

        # 在 label_2 中显示检测到的文字信息
        self.label_4.setText("\n".join(messages))
        self.label_5.setText("\n".join(messages2))
        self.label_6.setText("\n".join(messages3))
    def close_camera(self):  # 关闭摄像头
        self.camera_timer.stop()  # 停止读取
        self.cap.release()  # 释放摄像头
        self.label_3.clear()  # 清除label_3组件上的图片
        self.label_3.setText("TextLabel")  # 设置文字在界面上


import text5_rc

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    main_win = Ui_QMainWindow()
    main_win.show()
    sys.exit(app.exec_())